/**
 * ⚠️ AUTO-GENERATED FILE ⚠️
 * This file is automatically generated. Do not modify it manually.
 * Any changes made to this file will be overwritten when regenerating.
 * 
 * Generated by: surql-gen
 * Date: 2025-03-24T05:18:06.318Z
 */

import { Schema } from "effect";

// Type for representing a RecordId in Effect Schema
type RecordId<T extends string = string> = string & {
  readonly RecordId: unique symbol;
  readonly Table: T;
};

/**
 * Create a RecordId schema for a specific table
 */
function recordId<T extends string>(tableName: T): Schema.Schema<RecordId<T>> {
  return Schema.String.pipe(
    Schema.pattern(/^[a-zA-Z0-9_-]+:[a-zA-Z0-9_-]+$/),
    Schema.brand(`RecordId<${tableName}>`),
  ) as unknown as Schema.Schema<RecordId<T>>;
}


export class Account extends Schema.Class<Account>("Account")({
  id: recordId("account").annotations({
    description: "Unique identifier"
  })
}) {
  static readonly tableName = "account" as const;
}

export class Chat extends Schema.Class<Chat>("Chat")({
  id: recordId("chat").annotations({
    description: "Unique identifier"
  }),
  description: Schema.String,
  is_archived: Schema.Boolean.annotations({ default: false }),
  name: Schema.String,
  owner: recordId("user"),
  started_at: Schema.Date,
  title: Schema.String,
  updated_at: Schema.Date
}) {
  static readonly tableName = "chat" as const;
}

export class Message extends Schema.Class<Message>("Message")({
  id: recordId("message").annotations({
    description: "Unique identifier"
  }),
  attachments: Schema.Array(Schema.String),
  chatId: recordId("chat"),
  createdAt: Schema.Date,
  parts: Schema.Unknown,
  role: Schema.String
}) {
  static readonly tableName = "message" as const;
}

export class Session extends Schema.Class<Session>("Session")({
  id: recordId("session").annotations({
    description: "Unique identifier"
  })
}) {
  static readonly tableName = "session" as const;
}

export class User extends Schema.Class<User>("User")({
  id: recordId("user").annotations({
    description: "Unique identifier"
  })
}) {
  static readonly tableName = "user" as const;
}

export class Vote extends Schema.Class<Vote>("Vote")({
  id: recordId("vote").annotations({
    description: "Unique identifier"
  }),
  chatId: recordId("chat"),
  isUpvoted: Schema.Boolean,
  messageId: recordId("message")
}) {
  static readonly tableName = "vote" as const;
}