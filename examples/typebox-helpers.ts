/**
 * This example demonstrates how to use the TypeBox helper functions
 * for creating select, insert, update, and filter types in your SurrealDB app.
 * 
 * NOTE: Before running this example, make sure to generate the types first by running:
 * deno run -A mod.ts process <your-surrealdb-schema-file>
 * 
 * IMPORTANT: This is pseudocode for demonstration purposes only.
 */

import type { Static } from "@sinclair/typebox";
import { Type } from "@sinclair/typebox";

/**
 * NOTE: Importing these types assumes you've already run the code generator
 * If you get errors, it means you need to generate the types first
 */
// import type { 
//   TelegramChat, TelegramChatSelect, TelegramChatInsert, TelegramChatUpdate, TelegramChatFilter,
//   TelegramMessage 
// } from "../generated/schema.ts";

// For demonstration purposes, we'll define simple placeholder types
// The real types would be generated by surql-gen
const TelegramChatType = Type.Object({
  id: Type.String(),
  chat_id: Type.Number(),
  title: Type.String(),
  type: Type.String(),
  username: Type.String(),
  is_verified: Type.Boolean(),
  is_restricted: Type.Boolean(),
  member_count: Type.Number(),
  join_date: Type.String({ format: 'date-time' })
});

type TelegramChat = Static<typeof TelegramChatType>;

// These types would normally be generated
const TelegramChatSelect = Type.Object({
  id: Type.Optional(Type.Boolean()),
  chat_id: Type.Optional(Type.Boolean()),
  title: Type.Optional(Type.Boolean()),
  type: Type.Optional(Type.Boolean()),
  username: Type.Optional(Type.Boolean()),
  member_count: Type.Optional(Type.Boolean())
});

const TelegramChatInsert = Type.Object({
  chat_id: Type.Number(),
  title: Type.String(),
  type: Type.String(),
  username: Type.String(),
  is_verified: Type.Boolean(),
  is_restricted: Type.Boolean(),
  member_count: Type.Number(),
  join_date: Type.String({ format: 'date-time' })
});

const TelegramChatUpdate = Type.Object({
  title: Type.Optional(Type.String()),
  type: Type.Optional(Type.String()),
  username: Type.Optional(Type.String()),
  is_verified: Type.Optional(Type.Boolean()),
  is_restricted: Type.Optional(Type.Boolean()),
  member_count: Type.Optional(Type.Number())
});

const TelegramChatFilter = Type.Object({
  chat_id: Type.Optional(Type.Union([
    Type.Number(),
    Type.Object({
      eq: Type.Optional(Type.Number()),
      ne: Type.Optional(Type.Number()),
      gt: Type.Optional(Type.Number()),
      gte: Type.Optional(Type.Number()),
      lt: Type.Optional(Type.Number()),
      lte: Type.Optional(Type.Number())
    })
  ])),
  title: Type.Optional(Type.Union([
    Type.String(),
    Type.Object({
      eq: Type.Optional(Type.String()),
      ne: Type.Optional(Type.String()),
      contains: Type.Optional(Type.String()),
      startsWith: Type.Optional(Type.String()),
      endsWith: Type.Optional(Type.String())
    })
  ])),
  type: Type.Optional(Type.String()),
  member_count: Type.Optional(Type.Union([
    Type.Number(),
    Type.Object({
      eq: Type.Optional(Type.Number()),
      ne: Type.Optional(Type.Number()),
      gt: Type.Optional(Type.Number()),
      gte: Type.Optional(Type.Number()),
      lt: Type.Optional(Type.Number()),
      lte: Type.Optional(Type.Number())
    })
  ]))
});

type TelegramChatSelect = Static<typeof TelegramChatSelect>;
type TelegramChatInsert = Static<typeof TelegramChatInsert>;
type TelegramChatUpdate = Static<typeof TelegramChatUpdate>;
type TelegramChatFilter = Static<typeof TelegramChatFilter>;

// Simple mock of a database client for this example
interface DbClient {
  query<T>(query: string): Promise<T>;
  create<T>(table: string, data: Record<string, unknown>): Promise<T>;
  update<T>(id: string, data: Record<string, unknown>): Promise<T>;
  delete(id: string): Promise<boolean>;
}

// Example of a strongly-typed select function
async function selectTelegramChats(
  db: DbClient,
  filter: TelegramChatFilter,
  select?: TelegramChatSelect
): Promise<TelegramChat[]> {
  const query = `
    SELECT ${select ? Object.keys(select).join(', ') : '*'}
    FROM telegram_chat
    WHERE ${buildWhere(filter)}
  `;

  return await db.query<TelegramChat[]>(query);
}

// Example of a strongly-typed insert function
async function insertTelegramChat(
  db: DbClient,
  data: TelegramChatInsert
): Promise<TelegramChat> {
  return await db.create<TelegramChat>('telegram_chat', data);
}

// Example of a strongly-typed update function
async function updateTelegramChat(
  db: DbClient,
  id: string,
  data: TelegramChatUpdate
): Promise<TelegramChat> {
  return await db.update<TelegramChat>(`telegram_chat:${id}`, data);
}

// Example of a strongly-typed delete function
async function deleteTelegramChat(
  db: DbClient,
  id: string
): Promise<boolean> {
  return await db.delete(`telegram_chat:${id}`);
}

// Helper to build the WHERE clause from filter object
function buildWhere(filter: Record<string, unknown>): string {
  const conditions: string[] = [];

  for (const [key, value] of Object.entries(filter)) {
    if (value === null || value === undefined) continue;

    if (typeof value === 'object') {
      // Handle complex operators (eq, ne, gt, lt, etc.)
      for (const [op, opValue] of Object.entries(value as Record<string, unknown>)) {
        if (opValue === undefined) continue;

        switch (op) {
          case 'eq':
            conditions.push(`${key} = ${JSON.stringify(opValue)}`);
            break;
          case 'ne':
            conditions.push(`${key} != ${JSON.stringify(opValue)}`);
            break;
          case 'gt':
            conditions.push(`${key} > ${JSON.stringify(opValue)}`);
            break;
          case 'gte':
            conditions.push(`${key} >= ${JSON.stringify(opValue)}`);
            break;
          case 'lt':
            conditions.push(`${key} < ${JSON.stringify(opValue)}`);
            break;
          case 'lte':
            conditions.push(`${key} <= ${JSON.stringify(opValue)}`);
            break;
          case 'in':
            conditions.push(`${key} IN ${JSON.stringify(opValue)}`);
            break;
          case 'nin':
            conditions.push(`${key} NOT IN ${JSON.stringify(opValue)}`);
            break;
          case 'contains':
            conditions.push(`${key} CONTAINS ${JSON.stringify(opValue)}`);
            break;
          case 'startsWith':
            conditions.push(`${key} STARTS WITH ${JSON.stringify(opValue)}`);
            break;
          case 'endsWith':
            conditions.push(`${key} ENDS WITH ${JSON.stringify(opValue)}`);
            break;
        }
      }
    } else {
      // Simple equals condition
      conditions.push(`${key} = ${JSON.stringify(value)}`);
    }
  }

  return conditions.length > 0 ? conditions.join(' AND ') : 'true';
}

// Example usage with a mock DB client
async function exampleUsage() {
  // Mock DB client for demonstration purposes
  const db: DbClient = {
    query: async <T>(query: string): Promise<T> => {
      console.log(`Executing query: ${query}`);
      return [] as unknown as T;
    },
    create: async <T>(table: string, data: Record<string, unknown>): Promise<T> => {
      console.log(`Creating in ${table}:`, data);
      return { id: `${table}:1`, ...data } as unknown as T;
    },
    update: async <T>(id: string, data: Record<string, unknown>): Promise<T> => {
      console.log(`Updating ${id}:`, data);
      return { id, ...data } as unknown as T;
    },
    delete: async (id: string): Promise<boolean> => {
      console.log(`Deleting ${id}`);
      return true;
    }
  };

  // Insert a new chat
  const newChat = await insertTelegramChat(db, {
    chat_id: 12345,
    title: "My Test Chat",
    type: "group",
    username: "testchat",
    is_verified: false,
    is_restricted: false,
    member_count: 10,
    join_date: new Date().toISOString()
  });

  console.log("Inserted chat:", newChat);

  // Select chats with filters
  const chats = await selectTelegramChats(
    db,
    {
      member_count: { gt: 5 },
      type: "group",
      title: { contains: "Test" }
    },
    {
      // Only select these fields
      title: true,
      username: true,
      member_count: true
    }
  );

  console.log("Selected chats:", chats);

  // Update a chat
  if (newChat.id) {
    const chatId = newChat.id.toString().split(':')[1];
    const updatedChat = await updateTelegramChat(
      db,
      chatId,
      {
        title: "Updated Chat Title",
        member_count: 15
      }
    );

    console.log("Updated chat:", updatedChat);

    // Delete the chat
    const deleted = await deleteTelegramChat(db, chatId);
    console.log("Chat deleted:", deleted);
  }
} 